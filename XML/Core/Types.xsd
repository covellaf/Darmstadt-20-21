<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:xhtml="http://www.w3.org/1999/xhtml"
            xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore"
            xmlns:Types="http://www.ecss.nl/smp/2019/Core/Types"
            xmlns:Elements="http://www.ecss.nl/smp/2019/Core/Elements"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            xmlns="http://www.ecss.nl/smp/2019/Core/Types"
            targetNamespace="http://www.ecss.nl/smp/2019/Core/Types"
            elementFormDefault="unqualified"
            attributeFormDefault="unqualified"
            ecore:package="core.types"
            ecore:nsPrefix="Types"
            ecore:documentRoot="TypesDocumentRoot">
   <xsd:annotation>
      <xsd:documentation>This schema provides basic types and typing mechanisms, together with appropriate value specification mechanisms.</xsd:documentation>
      <xsd:documentation>
This file is generated by the UMF XML Schema Generation Tool, version 2.1.0.qualifier.

UML Model Information:
    UML model file:  file:/C:/Data/Projects/ECSS16/Software/Windows/pfritzen/SMP/Src/ecss.smp.smdl/target/xmi/ecss.smp.core.xmi
    UML model name:  Obsolete
    UML metamodel:   http://schema.omg.org/spec/UML/2.2
    XMI version:     2.1
    XMI exporter:    UMF XMI Converter (from MagicDraw UML 17.0.2), version 2.1.0.qualifier

XSLT Processing Information:
    Processing date: 2019-10-28T16:29:39.084+01:00
    XSLT processor:  SAXON 8.8.0.7 from Saxonica
    XSLT version:    2.0
    XSLT stylesheet: xmi-to-xsd.xslt
      </xsd:documentation>
   </xsd:annotation>
   <!-- Import UML Component 'Core::Elements' -->
   <xsd:import namespace="http://www.ecss.nl/smp/2019/Core/Elements"
               schemaLocation="../Core/Elements.xsd">
      <xsd:annotation>
         <xsd:documentation>This schema defines base metaclasses and annotation mechanisms used throughout the SMP Metamodel.</xsd:documentation>
      </xsd:annotation>
   </xsd:import>
   <!-- Import UML Component 'xlink' -->
   <xsd:import namespace="http://www.w3.org/1999/xlink" schemaLocation="../xlink.xsd">
      <xsd:annotation>
         <xsd:documentation>Schema for the W3C XML Linking Language (XLink).</xsd:documentation>
      </xsd:annotation>
   </xsd:import>

   <!-- ======================================== -->
   <!-- UML Package 'Types' -->
   <!-- ======================================== -->
   <!-- This package provides basic types and typing mechanisms, together with appropriate value specification mechanisms. -->

   <!-- ======================================== -->
   <!-- UML Package 'Types::Types' -->
   <!-- ======================================== -->
   <!-- Types are used in different contexts. The most common type is a LanguageType, but typing is used as well for other mechanisms, e.g. for Attributes (and later for Events). While this schema introduces basic types, more advanced types used specifically within SMDL Catalogues are detailed later. -->

   <!-- UML Enumeration 'VisibilityKind' -->
   <xsd:simpleType name="VisibilityKind">
      <xsd:annotation>
         <xsd:documentation>This enumeration defines the possible values for an element&apos;s visibility.</xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:string">
         <xsd:enumeration value="public">
            <xsd:annotation>
               <xsd:documentation>The element is globally visible.</xsd:documentation>
            </xsd:annotation>
         </xsd:enumeration>
         <xsd:enumeration value="private">
            <xsd:annotation>
               <xsd:documentation>The element is visible only within its containing classifier.</xsd:documentation>
            </xsd:annotation>
         </xsd:enumeration>
         <xsd:enumeration value="protected">
            <xsd:annotation>
               <xsd:documentation>The element is visible within its containing classifier and derived classifiers thereof.</xsd:documentation>
            </xsd:annotation>
         </xsd:enumeration>
      </xsd:restriction>
   </xsd:simpleType>

   <!-- UML Class 'VisibilityElement' -->
   <xsd:complexType name="VisibilityElement" abstract="true">
      <xsd:annotation>
         <xsd:documentation>A VisibilityElement is a named element that can be assigned a Visibility attribute to limit its scope of visibility. The visibility may be global (public), local to the parent (private) or local to the parent and derived types thereof (protected).</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Elements:NamedElement">
            <xsd:attribute name="Visibility" type="Types:VisibilityKind" use="optional" default="private">
               <xsd:annotation>
                  <xsd:documentation>Visibility of the element.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Type' -->
   <xsd:complexType name="Type" abstract="true">
      <xsd:annotation>
         <xsd:documentation>A Type is the abstract base metaclass for all type definition constructs specified by SMDL. A type must have a Uuid attribute representing a Universally Unique Identifier (UUID) as defined above. This is needed such that implementations may reference back to their specification without the need to directly reference an XML element in the catalogue.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:VisibilityElement">
            <xsd:attribute name="Uuid" type="Elements:UUID" use="required">
               <xsd:annotation>
                  <xsd:documentation>Universally unique identifier of the type.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'LanguageType' -->
   <xsd:complexType name="LanguageType" abstract="true">
      <xsd:annotation>
         <xsd:documentation>A LanguageType is the abstract base metaclass for value types (where instances are defined by their value), and references to value types. Also the Smdl Catalogue schema defines reference types (where instances are defined by their reference, i.e. their location in memory) which are derived from LanguageType as well.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:Type"/>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'ValueType' -->
   <xsd:complexType name="ValueType" abstract="true">
      <xsd:annotation>
         <xsd:documentation>An instance of a ValueType is uniquely determined by its value. Two instances of a value type are said to be equal if they have equal values. Value types include simple types like enumerations and integers, and composite types like structures and arrays.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:LanguageType"/>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'ValueReference' -->
   <xsd:complexType name="ValueReference">
      <xsd:annotation>
         <xsd:documentation>A ValueReference is a type that references a specific value type. It is the &quot;missing link&quot; between value types and reference types.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:LanguageType">
            <xsd:sequence>
               <xsd:element name="Type">
                  <xsd:annotation>
                     <xsd:documentation>Value type that the value reference points to.</xsd:documentation>
                     <xsd:documentation>Link destination type: Types:ValueType</xsd:documentation>
                     <xsd:appinfo source="http://www.w3.org/1999/xlink">Types:ValueType</xsd:appinfo>
                  </xsd:annotation>
                  <xsd:complexType ecore:name="TypeOfValueReference">
                     <xsd:attribute ref="xlink:type" use="prohibited" fixed="simple"/>
                     <xsd:attribute ref="xlink:href" use="required" ecore:name="ValueType"
                                    ecore:reference="Types:ValueType"/>
                     <xsd:attribute ref="xlink:title" use="optional" ecore:name="ValueTypeName"/>
                  </xsd:complexType>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'NativeType' -->
   <xsd:complexType name="NativeType">
      <xsd:annotation>
         <xsd:documentation>A NativeType specifies a type with any number of platform mappings. It is used to anchor existing or user-defined types into different target platforms. This mechanism is used within the specification to define the SMDL primitive types with respect to the Metamodel, but it can also be used to define native types within an arbitrary SMDL catalogue for use by models. In the latter case, native types are typically used to bind a model to some external library or existing Application Programming Interface (API).</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:LanguageType">
            <xsd:sequence>
               <xsd:element name="Platform" type="Types:PlatformMapping" minOccurs="0"
                            maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of platform mappings for the native type.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'PlatformMapping' -->
   <xsd:complexType name="PlatformMapping">
      <xsd:annotation>
         <xsd:documentation>
            <xhtml:p> A PlatformMapping defines the mapping of a native type into a target platform. The Name attribute specifies the platform name (see below), the Type attribute specifies the type name on the platform, the Namespace attribute specifies the type&apos;s namespace (if any) on the target platform, and the Location attribute specifies where the type is located. Note that the interpretation of these values is platform specific. </xhtml:p>
            <xhtml:p> The platform name shall be specified using the pattern &lt;language&gt;&lt;environment&gt;, where the environment is optional and may further detail the platform. Some examples are: </xhtml:p>
            <xhtml:ul>
               <xhtml:li> cpp: Standard ANSI/ISO C++ (for all environments) </xhtml:li>
               <xhtml:li> cpp__linux__: C++ under Linux Operating System environment </xhtml:li>
               <xhtml:li> idl: CORBA IDL </xhtml:li>
               <xhtml:li> xsd: XML Schema </xhtml:li>
               <xhtml:li> java: Java language </xhtml:li>
            </xhtml:ul>
            <xhtml:p> Basically, any platform mapping may be specified in SMDL as long as the tools - typically code generators working on SMDL Catalogue(s) - have an understanding of their meaning. <xhtml:br/>
               <xhtml:br/> The interpretation of the </xhtml:p>
            <xhtml:p> &lt;environment&gt; </xhtml:p>
            <xhtml:p> string may vary between different platforms, and is detailed in each platform mapping document. </xhtml:p>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:attribute name="Name" type="xsd:string" use="required">
         <xsd:annotation>
            <xsd:documentation>Name of the platform using the following pattern:
&lt;language&gt;_&lt;environment&gt;, where the environment may be split into &lt;os&gt;_&lt;compiler&gt;. Examples are:
cpp_windows_vc71 - C++ using Microsoft VC++ 7.1 under Windows
cpp_linux_gcc33  - C++ using GNU gcc 3.3 under Linux</xsd:documentation>
         </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="Type" type="xsd:string" use="required">
         <xsd:annotation>
            <xsd:documentation>Name of the type on the platform.</xsd:documentation>
         </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="Namespace" type="xsd:string" use="optional">
         <xsd:annotation>
            <xsd:documentation>Namespace on the platform.</xsd:documentation>
         </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="Location" type="xsd:string" use="optional">
         <xsd:annotation>
            <xsd:documentation>Location on the platform.
- In C++, this may be a required include file.
- In Java, this may be a jar file to reference.
- In C#, this may be an assembly to reference.</xsd:documentation>
         </xsd:annotation>
      </xsd:attribute>
   </xsd:complexType>

   <!-- ======================================== -->
   <!-- UML Package 'Types::ValueTypes' -->
   <!-- ======================================== -->
   <!-- This package provides mechanisms to specify value types. The shown metaclasses are not the value types themselves, but rather represent language elements (i.e. mechanisms) that can be applied to define actual value types. Please note that the PrimitiveType metaclass has been introduced to allow defining the available base types of SMDL, and is only used internally. Further, the NativeType metaclass provides a generic mechanism to specify native platform specific types, which is also used to define the platform mappings of the SMP primitive types within the Component Model. -->

   <!-- UML Class 'SimpleType' -->
   <xsd:complexType name="SimpleType" abstract="true">
      <xsd:annotation>
         <xsd:documentation>A simple type is a type that can be represented by a simple value. Simple types include primitive types as well as user-defined Enumeration, Integer, Float and String types.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:ValueType"/>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'PrimitiveType' -->
   <xsd:complexType name="PrimitiveType">
      <xsd:annotation>
         <xsd:documentation>A number of pre-defined types are needed in order to bootstrap the type system. These pre-defined value types are represented by instances of the metaclass PrimitiveType.
This mechanism is only used in order to bootstrap the type system and may not be used to define new types for modelling. This is an important restriction, as all values of primitive types may be held in a SimpleValue. The metaclasses derived from SimpleValue, however, are pre-defined and cannot be extended.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleType"/>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Enumeration' -->
   <xsd:complexType name="Enumeration">
      <xsd:annotation>
         <xsd:documentation>An Enumeration type represents one of a number of pre-defined enumeration literals. The Enumeration language element can be used to create user-defined enumeration types. An enumeration must always contain at least one EnumerationLiteral, each having a name and an integer Value attached to it.
All enumeration literals of an enumeration type must have unique names and values, respectively.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleType">
            <xsd:sequence>
               <xsd:element name="Literal" type="Types:EnumerationLiteral" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of enumeration literals.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'EnumerationLiteral' -->
   <xsd:complexType name="EnumerationLiteral">
      <xsd:annotation>
         <xsd:documentation>An EnumerationLiteral assigns a Name (inherited from NamedElement) to an integer Value.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Elements:NamedElement">
            <xsd:attribute name="Value" type="xsd:int" use="required">
               <xsd:annotation>
                  <xsd:documentation>Value of the enumeration literal.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Integer' -->
   <xsd:complexType name="Integer">
      <xsd:annotation>
         <xsd:documentation>An Integer type represents integer values with a given range of valid values (via the Minimum and Maximum attributes). The Unit element can hold a physical unit that can be used by applications to ensure physical unit integrity across models.
Optionally, the PrimitiveType used to encode the integer value may be specified (one of Int8, Int16, Int32, Int64, UIn8, UInt16, UInt32, UInt64, where the default is Int32).</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleType">
            <xsd:sequence>
               <xsd:element name="PrimitiveType" minOccurs="0">
                  <xsd:annotation>
                     <xsd:documentation>Primitive type of the integer type.</xsd:documentation>
                     <xsd:documentation>Link destination type: Types:PrimitiveType</xsd:documentation>
                     <xsd:appinfo source="http://www.w3.org/1999/xlink">Types:PrimitiveType</xsd:appinfo>
                  </xsd:annotation>
                  <xsd:complexType ecore:name="PrimitiveTypeOfInteger">
                     <xsd:attribute ref="xlink:type" use="prohibited" fixed="simple"/>
                     <xsd:attribute ref="xlink:href" use="required" ecore:name="PrimitiveType"
                                    ecore:reference="Types:PrimitiveType"/>
                     <xsd:attribute ref="xlink:title" use="optional" ecore:name="PrimitiveTypeName"/>
                  </xsd:complexType>
               </xsd:element>
            </xsd:sequence>
            <xsd:attribute name="Minimum" type="xsd:long" use="optional">
               <xsd:annotation>
                  <xsd:documentation>Minimum value of the integer type.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="Maximum" type="xsd:long" use="optional">
               <xsd:annotation>
                  <xsd:documentation>Maximum value of the integer type.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="Unit" type="xsd:string" use="optional">
               <xsd:annotation>
                  <xsd:documentation>Unit of the integer type.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Float' -->
   <xsd:complexType name="Float">
      <xsd:annotation>
         <xsd:documentation>A Float type represents floating-point values with a given range of valid values (via the Minimum and Maximum attributes). The MinInclusive and MaxInclusive attributes determine whether the boundaries are included in the range or not. The Unit element can hold a physical unit that can be used by applications to ensure physical unit integrity across models.
Optionally, the PrimitiveType used to encode the floating-point value may be specified (one of Float32 or Float64, where the default is Float64).</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleType">
            <xsd:sequence>
               <xsd:element name="PrimitiveType" minOccurs="0">
                  <xsd:annotation>
                     <xsd:documentation>Primitive type of the float type.</xsd:documentation>
                     <xsd:documentation>Link destination type: Types:PrimitiveType</xsd:documentation>
                     <xsd:appinfo source="http://www.w3.org/1999/xlink">Types:PrimitiveType</xsd:appinfo>
                  </xsd:annotation>
                  <xsd:complexType ecore:name="PrimitiveTypeOfFloat">
                     <xsd:attribute ref="xlink:type" use="prohibited" fixed="simple"/>
                     <xsd:attribute ref="xlink:href" use="required" ecore:name="PrimitiveType"
                                    ecore:reference="Types:PrimitiveType"/>
                     <xsd:attribute ref="xlink:title" use="optional" ecore:name="PrimitiveTypeName"/>
                  </xsd:complexType>
               </xsd:element>
            </xsd:sequence>
            <xsd:attribute name="Maximum" type="xsd:double" use="optional">
               <xsd:annotation>
                  <xsd:documentation>Maximum value of the float type.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="MinInclusive" type="xsd:boolean" use="optional" default="true">
               <xsd:annotation>
                  <xsd:documentation>True if the minimum value is a valid value, false otherwise.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="Minimum" type="xsd:double" use="optional">
               <xsd:annotation>
                  <xsd:documentation>Minimum value of the float type.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="MaxInclusive" type="xsd:boolean" use="optional" default="true">
               <xsd:annotation>
                  <xsd:documentation>True if the maximum value is a valid value, false otherwise.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="Unit" type="xsd:string" use="optional">
               <xsd:annotation>
                  <xsd:documentation>Unit of the float type.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'String' -->
   <xsd:complexType name="String">
      <xsd:annotation>
         <xsd:documentation>A String type represents fixed Length string values base on Char8. The String language element defines an Array of Char8 values, but allows a more natural handling of it, e.g. by storing a string value as one string, not as an array of individual characters.
As with arrays, SMDL does not allow defining variable-sized strings, as these have the same problems as dynamic arrays (e.g. their size is not know up-front, and their use requires memory allocation).
</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleType">
            <xsd:attribute name="Length" type="xsd:long" use="required">
               <xsd:annotation>
                  <xsd:documentation>Maximum length of the string.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Array' -->
   <xsd:complexType name="Array">
      <xsd:annotation>
         <xsd:documentation>An Array type defines a fixed-size array of identically typed elements, where ItemType defines the type of the array items, and Size defines the number of array items.
Multi-dimensional arrays are defined when ItemType is an Array type as well.
Dynamic arrays are not supported by SMDL, as they are not supported by some potential target platforms, and introduce various difficulties in memory management. </xsd:documentation>
         <xsd:documentation>
            <xhtml:p>
               <xhtml:b>
                  <xhtml:i> Remarks </xhtml:i>
               </xhtml:b> : Nevertheless, specific mechanisms are available to allow dynamic collections of components, either for containment (composition) or references (aggregation). </xhtml:p>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:ValueType">
            <xsd:sequence>
               <xsd:element name="ItemType">
                  <xsd:annotation>
                     <xsd:documentation>Type of each item of the array.</xsd:documentation>
                     <xsd:documentation>Link destination type: Types:ValueType</xsd:documentation>
                     <xsd:appinfo source="http://www.w3.org/1999/xlink">Types:ValueType</xsd:appinfo>
                  </xsd:annotation>
                  <xsd:complexType ecore:name="ItemTypeOfArray">
                     <xsd:attribute ref="xlink:type" use="prohibited" fixed="simple"/>
                     <xsd:attribute ref="xlink:href" use="required" ecore:name="ValueType"
                                    ecore:reference="Types:ValueType"/>
                     <xsd:attribute ref="xlink:title" use="optional" ecore:name="ValueTypeName"/>
                  </xsd:complexType>
               </xsd:element>
            </xsd:sequence>
            <xsd:attribute name="Size" type="xsd:long" use="required">
               <xsd:annotation>
                  <xsd:documentation>Size of the array.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Structure' -->
   <xsd:complexType name="Structure">
      <xsd:annotation>
         <xsd:documentation>A Structure type collects an arbitrary number of Fields representing the state of the structure. 
Within a structure, each field needs to be given a unique name. In order to arrive at semantically correct (data) type definitions, a structure type may not be recursive, i.e. a structure may not have a field that is typed by the structure itself.
A structure can also serve as a namespace to define an arbitrary number of Constants.
</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:ValueType">
            <xsd:sequence>
               <xsd:element name="Constant" type="Types:Constant" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of constants of the structure.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
               <xsd:element name="Field" type="Types:Field" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of fields of the structure.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Exception' -->
   <xsd:complexType name="Exception">
      <xsd:annotation>
         <xsd:documentation>An Exception represents a non-recoverable error that can occur when calling into an Operation or Property getter/setter (within an Operation this is represented by the RaisedException links and within a Property this is represented by the GetRaises and SetRaises links, respectively).
An Exception can contain constants and fields (from Structure) as well as operations, properties and associations (from Class). The fields represent the state variables of the exception which carry additional information when the exception is raised.
Furthermore, an Exception may be Abstract (from Class), and it may inherit from a single base exception (implementation inheritance), which is represented by the Base link (from Class).</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:Class"/>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Class' -->
   <xsd:complexType name="Class">
      <xsd:annotation>
         <xsd:documentation>The Class metaclass is derived from Structure. A class may be abstract (attribute Abstract), and it may inherit from a single base class (implementation inheritance), which is represented by the Base link.
As the Class metaclass is derived from Structure it can contain constants and fields. Further, it can have arbitrary numbers of properties (Property elements), operations (Operation elements), and associations (Association elements).</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:Structure">
            <xsd:sequence>
               <xsd:element name="Base" minOccurs="0">
                  <xsd:annotation>
                     <xsd:documentation>Optional base class of the class, to support single inheritance.</xsd:documentation>
                     <xsd:documentation>Link destination type: Types:Class</xsd:documentation>
                     <xsd:appinfo source="http://www.w3.org/1999/xlink">Types:Class</xsd:appinfo>
                  </xsd:annotation>
                  <xsd:complexType ecore:name="BaseOfClass">
                     <xsd:attribute ref="xlink:type" use="prohibited" fixed="simple"/>
                     <xsd:attribute ref="xlink:href" use="required" ecore:name="Class"
                                    ecore:reference="Types:Class"/>
                     <xsd:attribute ref="xlink:title" use="optional" ecore:name="ClassName"/>
                  </xsd:complexType>
               </xsd:element>
               <xsd:element name="Property" type="Types:Property" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of properties.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
               <xsd:element name="Operation" type="Types:Operation" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of operations.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
               <xsd:element name="Association" type="Types:Association" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of associations.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
            <xsd:attribute name="Abstract" type="xsd:boolean" use="optional" default="false">
               <xsd:annotation>
                  <xsd:documentation>Flag whether the class is abstract.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- ======================================== -->
   <!-- UML Package 'Types::Features' -->
   <!-- ======================================== -->
   <!-- A feature is an element that is contained in a type and that typically refers to a type. Additionally, some features have (default) values. -->

   <!-- UML Enumeration 'AccessKind' -->
   <xsd:simpleType name="AccessKind">
      <xsd:annotation>
         <xsd:documentation>This enumeration defines how a property can be accessed.</xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:string">
         <xsd:enumeration value="readWrite">
            <xsd:annotation>
               <xsd:documentation>Specifies a property, which has both a getter and a setter.</xsd:documentation>
            </xsd:annotation>
         </xsd:enumeration>
         <xsd:enumeration value="readOnly">
            <xsd:annotation>
               <xsd:documentation>Specifies a property, which only has a getter.</xsd:documentation>
            </xsd:annotation>
         </xsd:enumeration>
         <xsd:enumeration value="writeOnly">
            <xsd:annotation>
               <xsd:documentation>Specifies a property, which only has a setter.</xsd:documentation>
            </xsd:annotation>
         </xsd:enumeration>
      </xsd:restriction>
   </xsd:simpleType>

   <!-- UML Enumeration 'ParameterDirectionKind' -->
   <xsd:simpleType name="ParameterDirectionKind">
      <xsd:annotation>
         <xsd:documentation>This enumeration defines the possible parameter directions.</xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:string">
         <xsd:enumeration value="in">
            <xsd:annotation>
               <xsd:documentation>The parameter is read-only to the operation, i.e. its value must be specified on call, and cannot be changed inside the operation.</xsd:documentation>
            </xsd:annotation>
         </xsd:enumeration>
         <xsd:enumeration value="out">
            <xsd:annotation>
               <xsd:documentation>The parameter is write-only to the operation, i.e. its value is unspecified on call, and must be set by the operation.</xsd:documentation>
            </xsd:annotation>
         </xsd:enumeration>
         <xsd:enumeration value="inout">
            <xsd:annotation>
               <xsd:documentation>The parameter must be specified on call, and may be changed by the operation.</xsd:documentation>
            </xsd:annotation>
         </xsd:enumeration>
         <xsd:enumeration value="return">
            <xsd:annotation>
               <xsd:documentation>The parameter represents the operation&apos;s return value.</xsd:documentation>
            </xsd:annotation>
         </xsd:enumeration>
      </xsd:restriction>
   </xsd:simpleType>

   <!-- UML Class 'Constant' -->
   <xsd:complexType name="Constant">
      <xsd:annotation>
         <xsd:documentation>A Constant is a feature that is typed by a simple type and that must have a Value.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:VisibilityElement">
            <xsd:sequence>
               <xsd:element name="Type">
                  <xsd:annotation>
                     <xsd:documentation>Type of the constant.</xsd:documentation>
                     <xsd:documentation>Link destination type: Types:SimpleType</xsd:documentation>
                     <xsd:appinfo source="http://www.w3.org/1999/xlink">Types:SimpleType</xsd:appinfo>
                  </xsd:annotation>
                  <xsd:complexType ecore:name="TypeOfConstant">
                     <xsd:attribute ref="xlink:type" use="prohibited" fixed="simple"/>
                     <xsd:attribute ref="xlink:href" use="required" ecore:name="SimpleType"
                                    ecore:reference="Types:SimpleType"/>
                     <xsd:attribute ref="xlink:title" use="optional" ecore:name="SimpleTypeName"/>
                  </xsd:complexType>
               </xsd:element>
               <xsd:element name="Value" type="Types:SimpleValue">
                  <xsd:annotation>
                     <xsd:documentation>Value of the constant.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Field' -->
   <xsd:complexType name="Field">
      <xsd:annotation>
         <xsd:documentation>A Field is a feature that is typed by any value type but String8, and that may have a Default value.
The State attribute defines how the field is published to the simulation environment. Only fields with a State of true are stored using external persistence. The visibility to the user within the simulation environment can be controlled via the standard SMP attribute &quot;View&quot;. By default, the State flag is set to true and the View attribute defaults to &quot;None&quot; when not applied.
The Input and Output attributes define whether the field value is an input for internal calculations (i.e. needed in order to perform these calculations), or an output of internal calculations (i.e. modified when performing these calculations). These flags default to false, but can be changed from their default value to support dataflow-based design.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:VisibilityElement">
            <xsd:sequence>
               <xsd:element name="Type">
                  <xsd:annotation>
                     <xsd:documentation>Type of the field, which has to be a value type.</xsd:documentation>
                     <xsd:documentation>Link destination type: Types:ValueType</xsd:documentation>
                     <xsd:appinfo source="http://www.w3.org/1999/xlink">Types:ValueType</xsd:appinfo>
                  </xsd:annotation>
                  <xsd:complexType ecore:name="TypeOfField">
                     <xsd:attribute ref="xlink:type" use="prohibited" fixed="simple"/>
                     <xsd:attribute ref="xlink:href" use="required" ecore:name="ValueType"
                                    ecore:reference="Types:ValueType"/>
                     <xsd:attribute ref="xlink:title" use="optional" ecore:name="ValueTypeName"/>
                  </xsd:complexType>
               </xsd:element>
               <xsd:element name="Default" type="Types:Value" minOccurs="0">
                  <xsd:annotation>
                     <xsd:documentation>Default value of the field.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
            <xsd:attribute name="State" type="xsd:boolean" use="optional" default="true">
               <xsd:annotation>
                  <xsd:documentation>State flag of the field.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="Input" type="xsd:boolean" use="optional" default="false">
               <xsd:annotation>
                  <xsd:documentation>Input flag of the field.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="Output" type="xsd:boolean" use="optional" default="false">
               <xsd:annotation>
                  <xsd:documentation>Output flag of the field.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Property' -->
   <xsd:complexType name="Property">
      <xsd:annotation>
         <xsd:documentation>A Property has a similar syntax as a Field: It is a feature that references a language type. However, the semantics is different in that a property does not represent a state and that it can be assigned an Access attribute to specify how the property can be accessed (either readWrite, readOnly, or writeOnly, see AccessKind).
Furthermore, a property can be assigned a Category attribute to help grouping the properties within its owning type, and a property may specify an arbitrary number of exceptions that it can raise in its getter (GetRaises) and/or setter (SetRaises).</xsd:documentation>
         <xsd:documentation>
            <xhtml:p>
               <xhtml:b>
                  <xhtml:i> Remark </xhtml:i>
               </xhtml:b> : The category can be used in applications as ordering or filtering criterion, for example in a property grid. The term &quot;property&quot; used here closely corresponds in its semantics to the same term in the Java Beans specification and in the Microsoft .NET framework. That is, a property formally represents a &quot;getter&quot; or a &quot;setter&quot; operation or both which allow accessing state or configuration information (or derived information thereof) in a controlled way and which can also be exposed via interfaces (in contrast to fields). </xhtml:p>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:VisibilityElement">
            <xsd:sequence>
               <xsd:element name="Type">
                  <xsd:annotation>
                     <xsd:documentation>Type of the property.</xsd:documentation>
                     <xsd:documentation>Link destination type: Types:LanguageType</xsd:documentation>
                     <xsd:appinfo source="http://www.w3.org/1999/xlink">Types:LanguageType</xsd:appinfo>
                  </xsd:annotation>
                  <xsd:complexType ecore:name="TypeOfProperty">
                     <xsd:attribute ref="xlink:type" use="prohibited" fixed="simple"/>
                     <xsd:attribute ref="xlink:href" use="required" ecore:name="LanguageType"
                                    ecore:reference="Types:LanguageType"/>
                     <xsd:attribute ref="xlink:title" use="optional" ecore:name="LanguageTypeName"/>
                  </xsd:complexType>
               </xsd:element>
               <xsd:element name="AttachedField" minOccurs="0">
                  <xsd:annotation>
                     <xsd:documentation>Attached field of the property, in case that the property shadows a field.</xsd:documentation>
                     <xsd:documentation>Link destination type: Types:Field</xsd:documentation>
                     <xsd:appinfo source="http://www.w3.org/1999/xlink">Types:Field</xsd:appinfo>
                  </xsd:annotation>
                  <xsd:complexType ecore:name="AttachedFieldOfProperty">
                     <xsd:attribute ref="xlink:type" use="prohibited" fixed="simple"/>
                     <xsd:attribute ref="xlink:href" use="required" ecore:name="Field"
                                    ecore:reference="Types:Field"/>
                     <xsd:attribute ref="xlink:title" use="optional" ecore:name="FieldName"/>
                  </xsd:complexType>
               </xsd:element>
               <xsd:element name="GetRaises" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of exceptions raised by the property getter.</xsd:documentation>
                     <xsd:documentation>Link destination type: Types:Exception</xsd:documentation>
                     <xsd:appinfo source="http://www.w3.org/1999/xlink">Types:Exception</xsd:appinfo>
                  </xsd:annotation>
                  <xsd:complexType ecore:name="GetRaisesOfProperty">
                     <xsd:attribute ref="xlink:type" use="prohibited" fixed="simple"/>
                     <xsd:attribute ref="xlink:href" use="required" ecore:name="Exception"
                                    ecore:reference="Types:Exception"/>
                     <xsd:attribute ref="xlink:title" use="optional" ecore:name="ExceptionName"/>
                  </xsd:complexType>
               </xsd:element>
               <xsd:element name="SetRaises" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of exceptions raised by the property setter.</xsd:documentation>
                     <xsd:documentation>Link destination type: Types:Exception</xsd:documentation>
                     <xsd:appinfo source="http://www.w3.org/1999/xlink">Types:Exception</xsd:appinfo>
                  </xsd:annotation>
                  <xsd:complexType ecore:name="SetRaisesOfProperty">
                     <xsd:attribute ref="xlink:type" use="prohibited" fixed="simple"/>
                     <xsd:attribute ref="xlink:href" use="required" ecore:name="Exception"
                                    ecore:reference="Types:Exception"/>
                     <xsd:attribute ref="xlink:title" use="optional" ecore:name="ExceptionName"/>
                  </xsd:complexType>
               </xsd:element>
            </xsd:sequence>
            <xsd:attribute name="Access" type="Types:AccessKind" use="optional" default="readWrite">
               <xsd:annotation>
                  <xsd:documentation>Access kind of the property.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="Category" type="xsd:string" use="optional" default="Properties">
               <xsd:annotation>
                  <xsd:documentation>Category  of the property, which can be used for grouping.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Association' -->
   <xsd:complexType name="Association">
      <xsd:annotation>
         <xsd:documentation>An Association is a feature that is typed by a language type (Type link). An association always expresses a reference to an instance of the referenced language type. This reference is either another model (if the Type link refers to a Model or Interface), or it is a field contained in another model (if the Type link refers to a ValueType).</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:VisibilityElement">
            <xsd:sequence>
               <xsd:element name="Type">
                  <xsd:annotation>
                     <xsd:documentation>Type that the association points to.</xsd:documentation>
                     <xsd:documentation>Link destination type: Types:LanguageType</xsd:documentation>
                     <xsd:appinfo source="http://www.w3.org/1999/xlink">Types:LanguageType</xsd:appinfo>
                  </xsd:annotation>
                  <xsd:complexType ecore:name="TypeOfAssociation">
                     <xsd:attribute ref="xlink:type" use="prohibited" fixed="simple"/>
                     <xsd:attribute ref="xlink:href" use="required" ecore:name="LanguageType"
                                    ecore:reference="Types:LanguageType"/>
                     <xsd:attribute ref="xlink:title" use="optional" ecore:name="LanguageTypeName"/>
                  </xsd:complexType>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Operation' -->
   <xsd:complexType name="Operation">
      <xsd:annotation>
         <xsd:documentation>An Operation may have an arbitrary number of parameters, where at most one of the parameters may be of Direction = ParameterDirectionKind.return. If such a parameter is absent, the operation is a void function (procedure) without return value.
An Operation may specify an arbitrary number of exceptions that it can raise (RaisedException).</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:VisibilityElement">
            <xsd:sequence>
               <xsd:element name="Parameter" type="Types:Parameter" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of parameters of the operation.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
               <xsd:element name="RaisedException" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of exceptions that may be raised by the operation.</xsd:documentation>
                     <xsd:documentation>Link destination type: Types:Exception</xsd:documentation>
                     <xsd:appinfo source="http://www.w3.org/1999/xlink">Types:Exception</xsd:appinfo>
                  </xsd:annotation>
                  <xsd:complexType ecore:name="RaisedExceptionOfOperation">
                     <xsd:attribute ref="xlink:type" use="prohibited" fixed="simple"/>
                     <xsd:attribute ref="xlink:href" use="required" ecore:name="Exception"
                                    ecore:reference="Types:Exception"/>
                     <xsd:attribute ref="xlink:title" use="optional" ecore:name="ExceptionName"/>
                  </xsd:complexType>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Parameter' -->
   <xsd:complexType name="Parameter">
      <xsd:annotation>
         <xsd:documentation>A Parameter has a Type and a Direction, where the direction may have the values in, out, inout or return (see ParameterDirectionKind).
When referencing a value type, a parameter may have an additional Default value, which can be used by languages that support default values for parameters.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Elements:NamedElement">
            <xsd:sequence>
               <xsd:element name="Type">
                  <xsd:annotation>
                     <xsd:documentation>Type of the parameter.</xsd:documentation>
                     <xsd:documentation>Link destination type: Types:LanguageType</xsd:documentation>
                     <xsd:appinfo source="http://www.w3.org/1999/xlink">Types:LanguageType</xsd:appinfo>
                  </xsd:annotation>
                  <xsd:complexType ecore:name="TypeOfParameter">
                     <xsd:attribute ref="xlink:type" use="prohibited" fixed="simple"/>
                     <xsd:attribute ref="xlink:href" use="required" ecore:name="LanguageType"
                                    ecore:reference="Types:LanguageType"/>
                     <xsd:attribute ref="xlink:title" use="optional" ecore:name="LanguageTypeName"/>
                  </xsd:complexType>
               </xsd:element>
               <xsd:element name="Default" type="Types:Value" minOccurs="0">
                  <xsd:annotation>
                     <xsd:documentation>Default value of the parameter.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
            <xsd:attribute name="Direction" type="Types:ParameterDirectionKind" use="optional"
                           default="in">
               <xsd:annotation>
                  <xsd:documentation>Direction of the parameter.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- ======================================== -->
   <!-- UML Package 'Types::Features::Field versus Property' -->
   <!-- ======================================== -->
   <!-- The semantics of a property is very different from the semantics of a field. A field always has a memory location holding its value, while a property is a convenience mechanism to represent one or two access operations, namely the setter and/or the getter. If a property is read-only, there is no setter, if it is write-only, there is to getter. The actual implementation depends on the target platform and language.
Compared to fields, properties have the advantage that there is no direct memory access, but every access is operation-based. This allows mapping them to distributed platforms (e.g. CORBA), and ensures that the containing type always has knowledge about changes of its state (e.g. to support range checking in the setter).
On implementation level, properties are frequently bound to a specific field. This can be expressed by linking to a field (of the same type) via the AttachedField link. 
 -->
   <!-- <b><i>Remark</i></b>: For example, this information can be utilised by a code generator to generate the relevant binding from the setter and/or the getter to the attached field in the code. -->

   <!-- ======================================== -->
   <!-- UML Package 'Types::Values' -->
   <!-- ======================================== -->
   <!-- A Value represents the state of a ValueType. For each metaclass derived from ValueType, a corresponding metaclass derived from Value is defined. Values are used in various places. Within the Core Types schema, they are used for the Default value of a Field, Parameter and AttributeType and for the Value of a Constant. -->

   <!-- UML Class 'Value' -->
   <xsd:complexType name="Value" abstract="true">
      <xsd:annotation>
         <xsd:documentation>The Value metaclass is an abstract base class for specialised values.
The Field attribute specifies the reference to the corresponding field via its name or its locally qualified path. This attribute can be omitted in cases where no field reference needs to be specified (e.g. on a default value of a Parameter).</xsd:documentation>
      </xsd:annotation>
      <xsd:attribute name="Field" type="xsd:string" use="optional">
         <xsd:annotation>
            <xsd:documentation>Specifies the reference to the corresponding field via its name or its locally qualified path. This attribute can be omitted in cases where no field reference needs to be specified (e.g. on a default value of a Parameter).</xsd:documentation>
         </xsd:annotation>
      </xsd:attribute>
   </xsd:complexType>

   <!-- UML Class 'SimpleValue' -->
   <xsd:complexType name="SimpleValue" abstract="true">
      <xsd:annotation>
         <xsd:documentation>A SimpleValue represents a value that is of simple type (this includes all SMP primitive types as well as user-defined Integer, Float, String and Enumeration types).
To ensure type safety, specific sub-metaclasses are introduced, which specify the type of the Value attribute.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:Value"/>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'SimpleArrayValue' -->
   <xsd:complexType name="SimpleArrayValue" abstract="true">
      <xsd:annotation>
         <xsd:documentation>A SimpleArrayValue represents an array of values that are of (the same) simple type.
To ensure type safety, specific sub-metaclasses are introduced, which specify the type of the contained ItemValue elements.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:Value"/>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'ArrayValue' -->
   <xsd:complexType name="ArrayValue">
      <xsd:annotation>
         <xsd:documentation>An ArrayValue holds values for each array item, represented by the ItemValue elements. The corresponding array type defines the number of item values.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:Value">
            <xsd:sequence>
               <xsd:element name="ItemValue" type="Types:Value" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of values of the individual array items.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'StructureValue' -->
   <xsd:complexType name="StructureValue">
      <xsd:annotation>
         <xsd:documentation>A StructureValue holds field values for all fields of the corresponding structure type. Thereby, the Field attribute of each contained value specifies the local field name within the structure.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:Value">
            <xsd:sequence>
               <xsd:element name="FieldValue" type="Types:Value" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of field values of the individual structure fields.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- ======================================== -->
   <!-- UML Package 'Types::Values::SimpleValues' -->
   <!-- ======================================== -->
   <!-- Values corresponding to simple types are introduced as specialized metaclasses in order to allow type-safe and efficient XML serialization. A specific metaclass is introduced for each SMP primitive type and to specify enumeration values. -->

   <!-- UML Class 'BoolValue' -->
   <xsd:complexType name="BoolValue">
      <xsd:annotation>
         <xsd:documentation>A BoolValue holds a value for an item of type Bool.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleValue">
            <xsd:attribute name="Value" type="xsd:boolean" use="required">
               <xsd:annotation>
                  <xsd:documentation>Value of type Boolean.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Char8Value' -->
   <xsd:complexType name="Char8Value">
      <xsd:annotation>
         <xsd:documentation>A Char8Value holds a value for an item of type Char8.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleValue">
            <xsd:attribute name="Value" type="xsd:string" use="required">
               <xsd:annotation>
                  <xsd:documentation>Value of type char8.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'DateTimeValue' -->
   <xsd:complexType name="DateTimeValue">
      <xsd:annotation>
         <xsd:documentation>A DateTimeValue holds a value for an item of type DateTime.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleValue">
            <xsd:attribute name="Value" type="xsd:dateTime" use="required">
               <xsd:annotation>
                  <xsd:documentation>Value of type DateTime.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'DurationValue' -->
   <xsd:complexType name="DurationValue">
      <xsd:annotation>
         <xsd:documentation>A DurationValue holds a value for an item of type Duration.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleValue">
            <xsd:attribute name="Value" type="xsd:duration" use="required">
               <xsd:annotation>
                  <xsd:documentation>Value of type Duration.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'EnumerationValue' -->
   <xsd:complexType name="EnumerationValue">
      <xsd:annotation>
         <xsd:documentation>An EnumerationValue holds a value for an item of an Enumeration type.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleValue">
            <xsd:attribute name="Value" type="xsd:int" use="required">
               <xsd:annotation>
                  <xsd:documentation>Value of type Int32.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="Literal" type="xsd:string" use="optional">
               <xsd:annotation>
                  <xsd:documentation>Literal string that the value corresponds to.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Float32Value' -->
   <xsd:complexType name="Float32Value">
      <xsd:annotation>
         <xsd:documentation>A Float32Value holds a value for an item of type Float32.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleValue">
            <xsd:attribute name="Value" type="xsd:float" use="required">
               <xsd:annotation>
                  <xsd:documentation>Value of type Float32.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Float64Value' -->
   <xsd:complexType name="Float64Value">
      <xsd:annotation>
         <xsd:documentation>A Float64Value holds a value for an item of type Float64.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleValue">
            <xsd:attribute name="Value" type="xsd:double" use="required">
               <xsd:annotation>
                  <xsd:documentation>Value of type Float64.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Int16Value' -->
   <xsd:complexType name="Int16Value">
      <xsd:annotation>
         <xsd:documentation>An Int16Value holds a value for an item of type Int16.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleValue">
            <xsd:attribute name="Value" type="xsd:short" use="required">
               <xsd:annotation>
                  <xsd:documentation>Value of type Int16.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Int32Value' -->
   <xsd:complexType name="Int32Value">
      <xsd:annotation>
         <xsd:documentation>An Int32Value holds a value for an item of type Int32.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleValue">
            <xsd:attribute name="Value" type="xsd:int" use="required">
               <xsd:annotation>
                  <xsd:documentation>Value of type Int32.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Int64Value' -->
   <xsd:complexType name="Int64Value">
      <xsd:annotation>
         <xsd:documentation>An Int64Value holds a value for an item of type Int64.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleValue">
            <xsd:attribute name="Value" type="xsd:long" use="required">
               <xsd:annotation>
                  <xsd:documentation>Value of type Int64.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Int8Value' -->
   <xsd:complexType name="Int8Value">
      <xsd:annotation>
         <xsd:documentation>An Int8Value holds a value for an item of type Int8.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleValue">
            <xsd:attribute name="Value" type="xsd:byte" use="required">
               <xsd:annotation>
                  <xsd:documentation>Value of type Int8.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'String8Value' -->
   <xsd:complexType name="String8Value">
      <xsd:annotation>
         <xsd:documentation>A String8Value holds a value for an item of type String8, or for an item of a String type.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleValue">
            <xsd:attribute name="Value" type="xsd:string" use="required">
               <xsd:annotation>
                  <xsd:documentation>Value of type String8.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'UInt16Value' -->
   <xsd:complexType name="UInt16Value">
      <xsd:annotation>
         <xsd:documentation>A UInt16Value holds a value for an item of type UInt16.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleValue">
            <xsd:attribute name="Value" type="xsd:unsignedShort" use="required">
               <xsd:annotation>
                  <xsd:documentation>Value of type UInt16.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'UInt32Value' -->
   <xsd:complexType name="UInt32Value">
      <xsd:annotation>
         <xsd:documentation>A UInt32Value holds a value for an item of type UInt32.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleValue">
            <xsd:attribute name="Value" type="xsd:unsignedInt" use="required">
               <xsd:annotation>
                  <xsd:documentation>Value of type UInt32.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'UInt64Value' -->
   <xsd:complexType name="UInt64Value">
      <xsd:annotation>
         <xsd:documentation>A UInt64Value holds a value for an item of type UInt64.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleValue">
            <xsd:attribute name="Value" type="xsd:unsignedLong" use="required">
               <xsd:annotation>
                  <xsd:documentation>Value of type UInt64.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'UInt8Value' -->
   <xsd:complexType name="UInt8Value">
      <xsd:annotation>
         <xsd:documentation>A UInt8Value holds a value for an item of type UInt8.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleValue">
            <xsd:attribute name="Value" type="xsd:unsignedByte" use="required">
               <xsd:annotation>
                  <xsd:documentation>Value of type UInt8.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- ======================================== -->
   <!-- UML Package 'Types::Values::SimpleArrayValues' -->
   <!-- ======================================== -->
   <!-- Values of arrays with items of simple type are introduced as specialized metaclasses in order to allow type-safe and efficient XML serialization. A specific metaclass is introduced for each SMP primitive type and to specify enumeration values. -->

   <!-- UML Class 'BoolArrayValue' -->
   <xsd:complexType name="BoolArrayValue">
      <xsd:annotation>
         <xsd:documentation>The BoolArrayValue holds an array of BoolValue items for an array of type Bool.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleArrayValue">
            <xsd:sequence>
               <xsd:element name="ItemValue" type="Types:BoolValue" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of item values.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Char8ArrayValue' -->
   <xsd:complexType name="Char8ArrayValue">
      <xsd:annotation>
         <xsd:documentation>The Char8ArrayValue holds an array of Char8Value items for an array of type Char8.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleArrayValue">
            <xsd:sequence>
               <xsd:element name="ItemValue" type="Types:Char8Value" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of item values.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'DateTimeArrayValue' -->
   <xsd:complexType name="DateTimeArrayValue">
      <xsd:annotation>
         <xsd:documentation>The DateTimeArrayValue holds an array of DateTimeValue items for an array of type DateTime.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleArrayValue">
            <xsd:sequence>
               <xsd:element name="ItemValue" type="Types:DateTimeValue" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of item values.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'DurationArrayValue' -->
   <xsd:complexType name="DurationArrayValue">
      <xsd:annotation>
         <xsd:documentation>The DurationArrayValue holds an array of DurationValue items for an array of type Duration.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleArrayValue">
            <xsd:sequence>
               <xsd:element name="ItemValue" type="Types:DurationValue" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of item values.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'EnumerationArrayValue' -->
   <xsd:complexType name="EnumerationArrayValue">
      <xsd:annotation>
         <xsd:documentation>The EnumerationArrayValue holds an array of EnumerationValue items for an array of an Enumeration type.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleArrayValue">
            <xsd:sequence>
               <xsd:element name="ItemValue" type="Types:EnumerationValue" minOccurs="0"
                            maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of item values.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Float32ArrayValue' -->
   <xsd:complexType name="Float32ArrayValue">
      <xsd:annotation>
         <xsd:documentation>The Float32ArrayValue holds an array of Float32Value items for an array of type Float32.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleArrayValue">
            <xsd:sequence>
               <xsd:element name="ItemValue" type="Types:Float32Value" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of item values.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Float64ArrayValue' -->
   <xsd:complexType name="Float64ArrayValue">
      <xsd:annotation>
         <xsd:documentation>The Float64ArrayValue holds an array of Float64Value items for an array of type Float64.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleArrayValue">
            <xsd:sequence>
               <xsd:element name="ItemValue" type="Types:Float64Value" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of item values.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Int16ArrayValue' -->
   <xsd:complexType name="Int16ArrayValue">
      <xsd:annotation>
         <xsd:documentation>The Int16ArrayValue holds an array of Int16Value items for an array of type Int16.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleArrayValue">
            <xsd:sequence>
               <xsd:element name="ItemValue" type="Types:Int16Value" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of item values.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Int32ArrayValue' -->
   <xsd:complexType name="Int32ArrayValue">
      <xsd:annotation>
         <xsd:documentation>The Int32ArrayValue holds an array of Int32Value items for an array of type Int32.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleArrayValue">
            <xsd:sequence>
               <xsd:element name="ItemValue" type="Types:Int32Value" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of item values.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Int64ArrayValue' -->
   <xsd:complexType name="Int64ArrayValue">
      <xsd:annotation>
         <xsd:documentation>The Int64ArrayValue holds an array of Int64Value items for an array of type Int64.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleArrayValue">
            <xsd:sequence>
               <xsd:element name="ItemValue" type="Types:Int64Value" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of item values.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Int8ArrayValue' -->
   <xsd:complexType name="Int8ArrayValue">
      <xsd:annotation>
         <xsd:documentation>The Int8ArrayValue holds an array of Int8Value items for an array of type Int8.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleArrayValue">
            <xsd:sequence>
               <xsd:element name="ItemValue" type="Types:Int8Value" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of item values.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'String8ArrayValue' -->
   <xsd:complexType name="String8ArrayValue">
      <xsd:annotation>
         <xsd:documentation>The String8ArrayValue holds an array of String8Value items for an array of type String8, or for an array of a String type.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleArrayValue">
            <xsd:sequence>
               <xsd:element name="ItemValue" type="Types:String8Value" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of item values.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'UInt16ArrayValue' -->
   <xsd:complexType name="UInt16ArrayValue">
      <xsd:annotation>
         <xsd:documentation>The UInt16ArrayValue holds an array of UInt16Value items for an array of type UInt16.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleArrayValue">
            <xsd:sequence>
               <xsd:element name="ItemValue" type="Types:UInt16Value" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of item values.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'UInt32ArrayValue' -->
   <xsd:complexType name="UInt32ArrayValue">
      <xsd:annotation>
         <xsd:documentation>The UInt32ArrayValue holds an array of UInt32Value items for an array of type UInt32.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleArrayValue">
            <xsd:sequence>
               <xsd:element name="ItemValue" type="Types:UInt32Value" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of item values.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'UInt64ArrayValue' -->
   <xsd:complexType name="UInt64ArrayValue">
      <xsd:annotation>
         <xsd:documentation>The UInt64ArrayValue holds an array of UInt64Value items for an array of type UInt64.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleArrayValue">
            <xsd:sequence>
               <xsd:element name="ItemValue" type="Types:UInt64Value" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of item values.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'UInt8ArrayValue' -->
   <xsd:complexType name="UInt8ArrayValue">
      <xsd:annotation>
         <xsd:documentation>The UInt8ArrayValue holds an array of UInt8Value items for an array of type UInt8.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:SimpleArrayValue">
            <xsd:sequence>
               <xsd:element name="ItemValue" type="Types:UInt8Value" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of item values.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- ======================================== -->
   <!-- UML Package 'Types::Attributes' -->
   <!-- ======================================== -->
   <!-- This package defines the SMDL attribute mechanism which allows extending SMDL semantics via standard or user-defined attributes. -->
   <!-- <b><i>Remark</i></b>: In SMDL, the term attribute is used to denote user-defined metadata, as in the .NET framework. In contrast, an attribute in UML denotes a non-functional member of a class, which corresponds to a field or property in SMDL. -->

   <!-- UML Class 'AttributeType' -->
   <xsd:complexType name="AttributeType">
      <xsd:annotation>
         <xsd:documentation>An AttributeType defines a new type available for adding attributes to elements. The AllowMultiple attribute specifies if a corresponding Attribute may be attached more than once to a language element, while the Usage element defines to which language elements attributes of this type can be attached. An attribute type always references a value type, and specifies a Default value.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Types:Type">
            <xsd:sequence>
               <xsd:element name="Type">
                  <xsd:annotation>
                     <xsd:documentation>Type of the attribute.</xsd:documentation>
                     <xsd:documentation>Link destination type: Types:ValueType</xsd:documentation>
                     <xsd:appinfo source="http://www.w3.org/1999/xlink">Types:ValueType</xsd:appinfo>
                  </xsd:annotation>
                  <xsd:complexType ecore:name="TypeOfAttributeType">
                     <xsd:attribute ref="xlink:type" use="prohibited" fixed="simple"/>
                     <xsd:attribute ref="xlink:href" use="required" ecore:name="ValueType"
                                    ecore:reference="Types:ValueType"/>
                     <xsd:attribute ref="xlink:title" use="optional" ecore:name="ValueTypeName"/>
                  </xsd:complexType>
               </xsd:element>
               <xsd:element name="Default" type="Types:Value">
                  <xsd:annotation>
                     <xsd:documentation>Default value of the attribute.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
               <xsd:element name="Usage" type="xsd:string" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of metaclasses the attribute can be applied to.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
            <xsd:attribute name="AllowMultiple" type="xsd:boolean" use="optional" default="false">
               <xsd:annotation>
                  <xsd:documentation>True if the attribute can be applied multiple times, false otherwise.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Attribute' -->
   <xsd:complexType name="Attribute">
      <xsd:annotation>
         <xsd:documentation>An Attribute element holds name-value pairs allowing to attach user-defined metadata to any Element.</xsd:documentation>
         <xsd:documentation>
            <xhtml:p>
               <xhtml:b>
                  <xhtml:i> Remark </xhtml:i>
               </xhtml:b> : This provides a similar mechanism as tagged values in UML, xsd:appinfo in XML Schema, annotations in Java 5.0 or attributes in the .NET framework. </xhtml:p>
         </xsd:documentation>
         <xsd:documentation>
            <xhtml:p>
               <xhtml:b>
                  <xhtml:i> Remark </xhtml:i>
               </xhtml:b> : A possible application of using attributes could be to decorate an SMDL model with information needed to guide a code generator, for example to tailor the mapping to C++. </xhtml:p>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Elements:Metadata">
            <xsd:sequence>
               <xsd:element name="Type">
                  <xsd:annotation>
                     <xsd:documentation>Type of the attribute.</xsd:documentation>
                     <xsd:documentation>Link destination type: Types:AttributeType</xsd:documentation>
                     <xsd:appinfo source="http://www.w3.org/1999/xlink">Types:AttributeType</xsd:appinfo>
                  </xsd:annotation>
                  <xsd:complexType ecore:name="TypeOfAttribute">
                     <xsd:attribute ref="xlink:type" use="prohibited" fixed="simple"/>
                     <xsd:attribute ref="xlink:href" use="required" ecore:name="AttributeType"
                                    ecore:reference="Types:AttributeType"/>
                     <xsd:attribute ref="xlink:title" use="optional" ecore:name="AttributeTypeName"/>
                  </xsd:complexType>
               </xsd:element>
               <xsd:element name="Value" type="Types:Value">
                  <xsd:annotation>
                     <xsd:documentation>Value of the attribute.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>
</xsd:schema>