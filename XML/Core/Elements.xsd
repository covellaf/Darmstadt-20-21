<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:xhtml="http://www.w3.org/1999/xhtml"
            xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore"
            xmlns:Elements="http://www.ecss.nl/smp/2019/Core/Elements"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            xmlns="http://www.ecss.nl/smp/2019/Core/Elements"
            targetNamespace="http://www.ecss.nl/smp/2019/Core/Elements"
            elementFormDefault="unqualified"
            attributeFormDefault="unqualified"
            ecore:package="core.elements"
            ecore:nsPrefix="Elements"
            ecore:documentRoot="ElementsDocumentRoot">
   <xsd:annotation>
      <xsd:documentation>This schema defines base metaclasses and annotation mechanisms used throughout the SMP Metamodel.</xsd:documentation>
      <xsd:documentation>
This file is generated by the UMF XML Schema Generation Tool, version 2.1.0.qualifier.

UML Model Information:
    UML model file:  file:/C:/Data/Projects/ECSS16/Software/Windows/pfritzen/SMP/Src/ecss.smp.smdl/target/xmi/ecss.smp.core.xmi
    UML model name:  Obsolete
    UML metamodel:   http://schema.omg.org/spec/UML/2.2
    XMI version:     2.1
    XMI exporter:    UMF XMI Converter (from MagicDraw UML 17.0.2), version 2.1.0.qualifier

XSLT Processing Information:
    Processing date: 2019-10-28T16:29:39.084+01:00
    XSLT processor:  SAXON 8.8.0.7 from Saxonica
    XSLT version:    2.0
    XSLT stylesheet: xmi-to-xsd.xslt
      </xsd:documentation>
   </xsd:annotation>
   <!-- Import UML Component 'xlink' -->
   <xsd:import namespace="http://www.w3.org/1999/xlink" schemaLocation="../xlink.xsd">
      <xsd:annotation>
         <xsd:documentation>Schema for the W3C XML Linking Language (XLink).</xsd:documentation>
      </xsd:annotation>
   </xsd:import>

   <!-- ======================================== -->
   <!-- UML Package 'Elements' -->
   <!-- ======================================== -->
   <!-- This package defines base metaclasses and annotation mechanisms used throughout the SMP Metamodel. -->

   <!-- ======================================== -->
   <!-- UML Package 'Elements::BasicTypes' -->
   <!-- ======================================== -->
   <!-- The Core Elements schema defines some basic types which are used for attributes of other types. Some string types use a pattern tag to specify a regular expression that limits their value space. -->

   <!-- UML DataType 'Identifier' -->
   <xsd:simpleType name="Identifier">
      <xsd:annotation>
         <xsd:documentation>An Identifier is a machine-readable identification string for model elements stored in XML documents, being a possible target for XML links. This type is used in the Id attribute of the NamedElement metaclass (see below).
An identifier must not be empty, which is indicated by the minLength tag.</xsd:documentation>
         <xsd:documentation>Identifier is defined as an XML ID type. It must be unique in the space of identified things. Identifier must be used as an attribute because it is of the xsd:ID type, and this must exist only in attributes, never elements, to retain compatibility with XML 1.0 DTD&apos;s.</xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:ID">
         <xsd:minLength value="1"/>
      </xsd:restriction>
   </xsd:simpleType>

   <!-- UML DataType 'Name' -->
   <xsd:simpleType name="Name">
      <xsd:annotation>
         <xsd:documentation>A Name is a user-readable name for model elements. This type is used in the Name attribute of the NamedElement metaclass (see below). A name must start with a character, and is limited to characters, digits, and the underscore (&apos;_&apos;).
</xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:string">
         <xsd:pattern value="[a-zA-Z][a-zA-Z0-9_]*"/>
      </xsd:restriction>
   </xsd:simpleType>

   <!-- UML DataType 'Description' -->
   <xsd:simpleType name="Description">
      <xsd:annotation>
         <xsd:documentation>A Description holds a description for a model element. This type is used in the Description element of the NamedElement metaclass (see below).</xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:string"/>
   </xsd:simpleType>

   <!-- UML DataType 'Path' -->
   <xsd:simpleType name="Path">
      <xsd:annotation>
         <xsd:documentation>
            <xhtml:p> An SMP path string shall be a representation of a valid route from an SMP object in the hierarchy to another SMP object. Both Absolute and Relative path strings shall be supported and distinguished as follows: a) Paths starting with a delimiter are absolute paths from the simulation root object. b) Paths not starting with a delimiter are relative paths from the current object. The delimiter between component names in the path string shall be &quot;/&quot;. The delimiters between components and its children objects that are not components shall be either &quot;/&quot; or &quot;.&quot;. Trailing delimiters shall be allowed in path strings. It shall be possible to reference the parent object by the &quot;..&quot; string. It shall be possible to reference the current object by either the &quot;.&quot; string, or by an empty string &quot;&quot;. The path string shall allow an element in an array to be identified by &quot;[n]&quot; trailing the array name where &quot;n&quot; is the zero based element index, with no delimiter. Examples of valid path strings: <xhtml:ul>
                  <xhtml:li> /Satellite/Receivers/Receiver1 </xhtml:li>
                  <xhtml:li> /Logger </xhtml:li>
                  <xhtml:li> /Logger/ </xhtml:li>
                  <xhtml:li> ../../Transmitters/Transmitter4 </xhtml:li>
                  <xhtml:li> ./Satellite/../Satellite//Receivers/ </xhtml:li>
                  <xhtml:li> Component.Operation </xhtml:li>
                  <xhtml:li> MyModel.MyArray[2] </xhtml:li>
                  <xhtml:li> MyModel/MyArray[2] </xhtml:li>
               </xhtml:ul> Examples of invalid path strings: <xhtml:ul>
                  <xhtml:li> &quot;/..&quot;, parent of root object does not exist </xhtml:li>
                  <xhtml:li> &quot;...&quot;, meaning of triple dots not defined </xhtml:li>
               </xhtml:ul>
            </xhtml:p>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:string">
         <xsd:pattern value="[a-zA-Z\./][a-zA-Z0-9_\./\[\]]*"/>
      </xsd:restriction>
   </xsd:simpleType>

   <!-- UML DataType 'UUID' -->
   <xsd:simpleType name="UUID">
      <xsd:annotation>
         <xsd:documentation>A UUID is Universally Unique Identifier (UUID) for model elements, which takes the form of hexadecimal integers separated by hyphens, following the pattern 8-4-4-4-12 as defined by the Open Group. This type is used in the Uuid attribute of the Type metaclass.</xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:string">
         <xsd:pattern value="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"/>
      </xsd:restriction>
   </xsd:simpleType>

   <!-- ======================================== -->
   <!-- UML Package 'Elements::Elements' -->
   <!-- ======================================== -->
   <!-- The Core Elements schema defines the common base class NamedElement and the Document class which is the base for all SMP documents. -->

   <!-- UML Class 'NamedElement' -->
   <xsd:complexType name="NamedElement" abstract="true">
      <xsd:annotation>
         <xsd:documentation>The metaclass NamedElement is the common base for most other language elements. A named element has an Id attribute for unique identification in an XML file, a Name attribute holding a human-readable name to be used in applications, and a Description element holding a human-readable description. Furthermore, a named element can hold an arbitrary number of metadata children.</xsd:documentation>
      </xsd:annotation>
      <xsd:sequence>
         <xsd:element name="Description" type="Elements:Description" minOccurs="0">
            <xsd:annotation>
               <xsd:documentation>The description of the element.</xsd:documentation>
            </xsd:annotation>
         </xsd:element>
         <xsd:element name="Metadata" type="Elements:Metadata" minOccurs="0" maxOccurs="unbounded">
            <xsd:annotation>
               <xsd:documentation>Collection of optional metadata of the element.</xsd:documentation>
            </xsd:annotation>
         </xsd:element>
      </xsd:sequence>
      <xsd:attribute name="Id" type="Elements:Identifier" use="required">
         <xsd:annotation>
            <xsd:documentation>The unique identifier of the named element.
This is typically a machine-readable identification of the element that can be used for referencing the element.</xsd:documentation>
         </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="Name" type="Elements:Name" use="required">
         <xsd:annotation>
            <xsd:documentation>The name of the named element that is suitable for use in programming languages such as C++, Java, or CORBA IDL.
This is the element&apos;s name represented with only a limited character set specified by the Name type.</xsd:documentation>
         </xsd:annotation>
      </xsd:attribute>
   </xsd:complexType>

   <!-- UML Class 'Document' -->
   <xsd:complexType name="Document" abstract="true">
      <xsd:annotation>
         <xsd:documentation>A Document is a named element that can be the root element of an XML document. It therefore adds the Title, Date, Creator and Version attributes to allow identification of documents.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Elements:NamedElement">
            <xsd:attribute name="Title" type="xsd:string" use="optional">
               <xsd:annotation>
                  <xsd:documentation>Title of the document.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="Date" type="xsd:dateTime" use="optional">
               <xsd:annotation>
                  <xsd:documentation>Date the document was created or last updated.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="Creator" type="xsd:string" use="optional">
               <xsd:annotation>
                  <xsd:documentation>Creator of the document.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="Version" type="xsd:string" use="optional">
               <xsd:annotation>
                  <xsd:documentation>Version of the document.</xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- ======================================== -->
   <!-- UML Package 'Elements::Metadata' -->
   <!-- ======================================== -->
   <!-- Metadata is additional, named information stored with a named element. It is used to further annotate named elements, as the Description element is typically not sufficient.
Metadata can either be a simple Comment, a link to external Documentation, or an Attribute. Please note that the Attribute metaclass is shown on this diagram already, but not defined in the Core Elements schema. It is added by the Core Types schema later, because attributes are typed by an attribute type. -->

   <!-- UML Class 'Metadata' -->
   <xsd:complexType name="Metadata" abstract="true">
      <xsd:annotation>
         <xsd:documentation>Metadata is additional, named information stored with a named element. It is used to further annotate named elements, as the Description element is typically not sufficient.

</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Elements:NamedElement"/>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Comment' -->
   <xsd:complexType name="Comment">
      <xsd:annotation>
         <xsd:documentation>A Comment element holds user comments, e.g. for reviewing models. The Name of a comment should allow to reference the comment (e.g. contain the author&apos;s initials and a unique number), while the comment itself is stored in the Description.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Elements:Metadata"/>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'Documentation' -->
   <xsd:complexType name="Documentation">
      <xsd:annotation>
         <xsd:documentation>A Documentation element holds additional documentation, possibly together with links to external resources. This is done via the Resource element (e.g. holding links to external documentation, 3d animations, technical drawings, CAD models, etc.), based on the XML linking language.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Elements:Metadata">
            <xsd:sequence>
               <xsd:element name="Resource" type="xlink:simple" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Resource of the documentation as a link.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>
</xsd:schema>