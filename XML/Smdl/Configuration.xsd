<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:xhtml="http://www.w3.org/1999/xhtml"
            xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore"
            xmlns:Configuration="http://www.ecss.nl/smp/2019/Smdl/Configuration"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            xmlns:Types="http://www.ecss.nl/smp/2019/Core/Types"
            xmlns:Elements="http://www.ecss.nl/smp/2019/Core/Elements"
            xmlns="http://www.ecss.nl/smp/2019/Smdl/Configuration"
            targetNamespace="http://www.ecss.nl/smp/2019/Smdl/Configuration"
            elementFormDefault="unqualified"
            attributeFormDefault="unqualified"
            ecore:package="smdl.configuration"
            ecore:nsPrefix="Configuration"
            ecore:documentRoot="ConfigurationDocumentRoot">
   <xsd:annotation>
      <xsd:documentation>This schema defines all metamodel elements that are needed in order to define an SMDL configuration document. A configuration document allows specifying arbitrary field values of component instances in the simulation hierarchy. This can be used to initialise or reinitialise the simulation.</xsd:documentation>
      <xsd:documentation>
This file is generated by the UMF XML Schema Generation Tool, version 2.1.0.qualifier.

UML Model Information:
    UML model file:  file:/C:/Data/Projects/ECSS16/Software/Windows/pfritzen/SMP/Src/ecss.smp.smdl/target/xmi/ecss.smp.smdl.xmi
    UML model name:  Obsolete
    UML metamodel:   http://schema.omg.org/spec/UML/2.2
    XMI version:     2.1
    XMI exporter:    UMF XMI Converter (from MagicDraw UML 17.0.2), version 2.1.0.qualifier

XSLT Processing Information:
    Processing date: 2019-10-28T17:05:22.729+01:00
    XSLT processor:  SAXON 8.8.0.7 from Saxonica
    XSLT version:    2.0
    XSLT stylesheet: xmi-to-xsd.xslt
      </xsd:documentation>
   </xsd:annotation>
   <!-- Import UML Component 'xlink' -->
   <xsd:import namespace="http://www.w3.org/1999/xlink" schemaLocation="../xlink.xsd">
      <xsd:annotation>
         <xsd:documentation>Schema for the W3C XML Linking Language (XLink).</xsd:documentation>
      </xsd:annotation>
   </xsd:import>
   <!-- Import UML Component 'Core::Types' -->
   <xsd:import namespace="http://www.ecss.nl/smp/2019/Core/Types"
               schemaLocation="../Core/Types.xsd">
      <xsd:annotation>
         <xsd:documentation>This schema provides basic types and typing mechanisms, together with appropriate value specification mechanisms.</xsd:documentation>
      </xsd:annotation>
   </xsd:import>
   <!-- Import UML Component 'Core::Elements' -->
   <xsd:import namespace="http://www.ecss.nl/smp/2019/Core/Elements"
               schemaLocation="../Core/Elements.xsd">
      <xsd:annotation>
         <xsd:documentation>This schema defines base metaclasses and annotation mechanisms used throughout the SMP Metamodel.</xsd:documentation>
      </xsd:annotation>
   </xsd:import>

   <!-- ======================================== -->
   <!-- UML Package 'Configuration' -->
   <!-- ======================================== -->
   <!-- This package describes all metamodel elements that are needed in order to define an SMDL configuration document. A configuration document allows specifying arbitrary field values of component instances in the simulation hierarchy. This can be used to initialise or reinitialise the simulation. -->

   <!-- UML InstanceSpecification 'Configuration' -->
   <xsd:element name="Configuration" type="Configuration:Configuration">
      <xsd:annotation>
         <xsd:documentation>The Configuration element (of type Configuration) is the root element of an SMDL configuration.</xsd:documentation>
      </xsd:annotation>
   </xsd:element>

   <!-- UML Class 'ComponentConfiguration' -->
   <xsd:complexType name="ComponentConfiguration">
      <xsd:annotation>
         <xsd:documentation>
            <xhtml:p> A ComponentConfiguration defines field values of a component instance (model or service instance). The component instance is specified via the Path attribute, which can be <xhtml:ul>
                  <xhtml:li> absolute, i.e. the path starts with a slash &quot;/&quot;, and at the root of the simulation tree (e.g. Path=&quot;/Spacecraft/AOCS&quot; or Path=&quot;/Logger&quot;), or </xhtml:li>
                  <xhtml:li> relative, i.e. the path does not start with a slash &quot;/&quot; and is appended to the path of the parent component configuration. </xhtml:li>
               </xhtml:ul> Each FieldValue is an instance of one of the available Value metaclasses. A FieldValue has to reference the corresponding field of the component via its Field attribute which specifies the field&apos;s local name/path (e.g. Field=&quot;field1&quot; or Field=&quot;struct1.structField2&quot;). In addition to the ability to define a hierarchy of component configurations via the Component element, the Include element enables to include another Configuration file using a relative or absolute Path for it. </xhtml:p>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:sequence>
         <xsd:element name="Include" type="Configuration:ConfigurationUsage" minOccurs="0"
                      maxOccurs="unbounded">
            <xsd:annotation>
               <xsd:documentation>Collection of configuration usages from external files.</xsd:documentation>
            </xsd:annotation>
         </xsd:element>
         <xsd:element name="Component" type="Configuration:ComponentConfiguration" minOccurs="0"
                      maxOccurs="unbounded">
            <xsd:annotation>
               <xsd:documentation>Collection of component configurations to support a hierarchy.</xsd:documentation>
            </xsd:annotation>
         </xsd:element>
         <xsd:element name="FieldValue" type="Types:Value" minOccurs="0" maxOccurs="unbounded">
            <xsd:annotation>
               <xsd:documentation>Collection of field values.</xsd:documentation>
            </xsd:annotation>
         </xsd:element>
      </xsd:sequence>
      <xsd:attribute name="Path" type="Elements:Path" use="required">
         <xsd:annotation>
            <xsd:documentation>Path to the component to configure, in the format accepted by the Resolver service.</xsd:documentation>
         </xsd:annotation>
      </xsd:attribute>
   </xsd:complexType>

   <!-- UML Class 'Configuration' -->
   <xsd:complexType name="Configuration">
      <xsd:annotation>
         <xsd:documentation>A Configuration acts as the root element (top-level node) in an SMDL Configuration document. A configuration contains a tree of component configurations that define field values of component instances (model or service instances). Further, a configuration may include other configuration documents via the Include element.</xsd:documentation>
      </xsd:annotation>
      <xsd:complexContent>
         <xsd:extension base="Elements:Document">
            <xsd:sequence>
               <xsd:element name="Include" type="Configuration:ConfigurationUsage" minOccurs="0"
                            maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of configuration usages from external files.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
               <xsd:element name="Component" type="Configuration:ComponentConfiguration" minOccurs="0"
                            maxOccurs="unbounded">
                  <xsd:annotation>
                     <xsd:documentation>Collection of component configurations to support a hierarchy.</xsd:documentation>
                  </xsd:annotation>
               </xsd:element>
            </xsd:sequence>
         </xsd:extension>
      </xsd:complexContent>
   </xsd:complexType>

   <!-- UML Class 'ConfigurationUsage' -->
   <xsd:complexType name="ConfigurationUsage">
      <xsd:annotation>
         <xsd:documentation>A ConfigurationUsage allows to include another SMDL Configuration document. The external configuration document is referenced via the Configuration link. The Path specifies the (optional) prefix that shall be applied to all paths in the external configuration document. This allows pre-defined configuration documents to be re-used for the configuration of components in various places in the model hierarchy.</xsd:documentation>
      </xsd:annotation>
      <xsd:sequence>
         <xsd:element name="Configuration">
            <xsd:annotation>
               <xsd:documentation>Configuration that the usage points to.</xsd:documentation>
               <xsd:documentation>Link destination type: Configuration:Configuration</xsd:documentation>
               <xsd:appinfo source="http://www.w3.org/1999/xlink">Configuration:Configuration</xsd:appinfo>
            </xsd:annotation>
            <xsd:complexType ecore:name="ConfigurationOfConfigurationUsage">
               <xsd:attribute ref="xlink:type" use="prohibited" fixed="simple"/>
               <xsd:attribute ref="xlink:href" use="required" ecore:name="Configuration"
                              ecore:reference="Configuration:Configuration"/>
               <xsd:attribute ref="xlink:title" use="optional" ecore:name="ConfigurationName"/>
            </xsd:complexType>
         </xsd:element>
      </xsd:sequence>
      <xsd:attribute name="Path" type="Elements:Path" use="optional">
         <xsd:annotation>
            <xsd:documentation>Specifies the (optional) prefix that shall be applied to all paths in the external configuration document. This allows pre-defined configuration documents to be re-used for the configuration of components in various places in the model hierarchy.</xsd:documentation>
         </xsd:annotation>
      </xsd:attribute>
   </xsd:complexType>
</xsd:schema>